trigger:
  branches:
    include:
      - main

variables:
  resourceGroup: 'rg-devops-cli'
  location: 'East US'
  appServicePlan: 'ASP-DevopsRG-87c7'
  webAppNameDev: 'webapp-cli-dev-$(Build.BuildId)'
  webAppNameProd: 'webapp-cli-prod'
  runtime: 'NODE:18-lts'

pool:
  vmImage: 'ubuntu-latest'

stages:

# ---------- Build & Test ----------
- stage: BuildAndTest
  displayName: 'Build, Lint, and Unit Test'
  jobs:
    - job: BuildJob
      displayName: 'Install, Lint, Test'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Use Node.js 18.x'

        - script: |
            cd src
            npm install
          displayName: 'üì¶ Install Dependencies'

        - script: |
            cd src
            npx eslint . --ext .js,.jsx,.ts,.tsx
          displayName: '‚úÖ Run ESLint'

        - script: |
            cd src
            npm test -- --ci
          displayName: 'üß™ Run Unit Tests'

        - task: ArchiveFiles@2
          displayName: 'üì¶ Zip Code for Deployment'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: 'üì§ Publish Artifact'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
            ArtifactName: 'drop'
            publishLocation: 'Container'

# ---------- Deploy to Dev ----------
- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: BuildAndTest
  jobs:
    - deployment: DeployToDev
      displayName: 'Deploy Web App to Dev'
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureCLI@2
                displayName: 'üîß Ensure Resource Group and Create Web App'
                inputs:
                  azureSubscription: 'Con1'
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    echo "üîç Checking if resource group '${{ variables.resourceGroup }}' exists..."
                    if ! az group show --name ${{ variables.resourceGroup }} &> /dev/null; then
                      echo "‚ùå Resource group not found. Creating..."
                      az group create --name ${{ variables.resourceGroup }} --location "${{ variables.location }}"
                    else
                      echo "‚úÖ Resource group exists."
                    fi

                    echo "üîç Validating runtime '${{ variables.runtime }}'..."
                    if [[ "${{ variables.runtime }}" != NODE* ]]; then
                      echo "‚ùå Runtime '${{ variables.runtime }}' is not supported. Exiting."
                      exit 1
                    fi

                    echo "üöÄ Creating Web App: ${{ variables.webAppNameDev }}"
                    az webapp create \
                      --resource-group ${{ variables.resourceGroup }} \
                      --plan ${{ variables.appServicePlan }} \
                      --name ${{ variables.webAppNameDev }} \
                      --runtime "${{ variables.runtime }}"

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'drop'
                  targetPath: '$(Pipeline.Workspace)'

              - task: AzureWebApp@1
                displayName: 'üöÄ Deploy to Azure Web App (Dev)'
                inputs:
                  azureSubscription: 'Con1'
                  appType: 'webAppLinux'
                  appName: '$(webAppNameDev)'
                  package: '$(Pipeline.Workspace)/app.zip'

              - script: |
                  echo "üîÅ Warm-up and Smoke Test with Retry..."
                  npm install
                  export TEST_URL="https://$(webAppNameDev).azurewebsites.net"
                  npm run smoketest
                workingDirectory: '$(Pipeline.Workspace)/drop'
                displayName: 'üî• Warm-up & Final Smoke Test (with Retry)'

# ---------- Deploy to Prod ----------
- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
    - deployment: DeployToProd
      displayName: 'Deploy Web App to Prod'
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'drop'
                  targetPath: '$(Pipeline.Workspace)'

              - task: AzureWebApp@1
                displayName: 'üöÄ Deploy to Prod Web App'
                inputs:
                  azureSubscription: 'Con1'
                  appType: 'webAppLinux'
                  appName: '$(webAppNameProd)'
                  package: '$(Pipeline.Workspace)/app.zip'
