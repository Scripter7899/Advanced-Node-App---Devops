trigger:
  branches:
    include:
      - main

variables:
  resourceGroup: 'rg-devops-cli'
  location: 'East US'
  appServicePlan: 'ASP-DevopsRG-87c7'
  webAppName: 'webapp-cli-demo-$(Build.BuildId)'
  runtime: 'NODE|18-lts'
  nodeVersion: '18.x'

pool:
  vmImage: 'ubuntu-latest'

stages:
# üõ† Stage 1: Build, Lint, Test
- stage: BuildAndTest
  displayName: 'Build, Lint, and Test'
  jobs:
  - job: BuildJob
    displayName: 'Install, Lint, Test, and Package'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Use Node.js $(nodeVersion)'

    - script: |
        npm install
      displayName: 'üì¶ Install Dependencies'

    - script: |
        npx eslint . --ext .js,.ts
      displayName: 'üßπ Run Lint Check'

    - script: |
        npm run test
      displayName: 'üß™ Run Unit Tests'

    - task: ArchiveFiles@2
      displayName: 'üì¶ Archive build'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'üì§ Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
        ArtifactName: 'drop'

# üöÄ Stage 2: Deploy to Development
- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: BuildAndTest
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy App to Dev'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureCLI@2
            displayName: 'üîß Ensure Resource Group and Create Web App'
            inputs:
              azureSubscription: 'Con1'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîç Checking if resource group '${{ variables.resourceGroup }}' exists..."
                if ! az group show --name ${{ variables.resourceGroup }} &>/dev/null; then
                  echo "‚ùå Resource group not found. Creating..."
                  az group create --name ${{ variables.resourceGroup }} --location "${{ variables.location }}"
                else
                  echo "‚úÖ Resource group exists."
                fi

                echo "üîç Validating runtime '${{ variables.runtime }}'..."
                runtime_check=$(az webapp list-runtimes | grep -i "${{ variables.runtime }}")
                if [ -z "$runtime_check" ]; then
                  echo "‚ùå Runtime '${{ variables.runtime }}' is not supported. Exiting."
                  exit 1
                else
                  echo "‚úÖ Runtime supported."
                fi

                echo "üöÄ Creating Web App: ${{ variables.webAppName }}"
                az webapp create \
                  --resource-group ${{ variables.resourceGroup }} \
                  --plan ${{ variables.appServicePlan }} \
                  --name ${{ variables.webAppName }} \
                  --runtime "${{ variables.runtime }}"

          - task: AzureWebApp@1
            displayName: 'üöÄ Deploy to Azure Web App (Dev)'
            inputs:
              azureSubscription: 'Con1'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              package: $(Pipeline.Workspace)/drop/app.zip

          - script: |
              echo "üîç Running smoke tests..."
              appUrl="https://$(webAppName).azurewebsites.net"

              echo "Test 1: Checking HTTP 200..."
              status_code=$(curl -s -o /dev/null -w "%{http_code}" $appUrl)
              if [ "$status_code" -ne 200 ]; then
                echo "‚ùå Test 1 Failed: Web App is not reachable (Status Code: $status_code)"
                exit 1
              else
                echo "‚úÖ Test 1 Passed"
              fi

              echo "Test 2: Checking response time..."
              response_time=$(curl -o /dev/null -s -w "%{time_total}\n" $appUrl)
              if (( $(echo "$response_time > 5.0" | bc -l) )); then
                echo "‚ùå Test 2 Failed: Response took too long ($response_time seconds)"
                exit 1
              else
                echo "‚úÖ Test 2 Passed"
              fi

              echo "Test 3: Checking if content is correct..."
              content=$(curl -s $appUrl)
              if [[ "$content" == *"Hello from Azure DevOps"* ]]; then
                echo "‚úÖ Test 3 Passed: Content verified"
              else
                echo "‚ùå Test 3 Failed: Unexpected content"
                exit 1
              fi
            displayName: '‚úÖ Post-Deploy Smoke Tests (Dev)'

# ‚úÖ Stage 3: Deploy to Production (with approval)
- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    displayName: 'Deploy App to Production'
    environment: 'production'  # Requires manual approval in Azure DevOps UI
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Con1'
              appType: 'webAppLinux'
              appName: '$(webAppName)-prod'
              package: $(Pipeline.Workspace)/drop/app.zip
            displayName: 'üöÄ Deploy to Azure Web App (Prod)'
