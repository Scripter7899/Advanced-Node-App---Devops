trigger:
  branches:
    include:
      - main

variables:
  resourceGroup: 'rg-devops-cli'
  location: 'East US'
  appServicePlan: 'ASP-DevopsRG-87c7'
  webAppName: 'webapp-cli-demo-$(Build.BuildId)'
  runtime: 'NODE 18-lts'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildAndTest
  displayName: 'üîß Build, Lint, and Unit Test'
  jobs:
    - job: BuildJob
      displayName: 'Build and Lint'
      steps:

        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Use Node.js 18.x'

        - script: |
            cd src
            npm install
          displayName: 'üì¶ Install Dependencies'

        - script: |
            cd src
            npm run lint
          displayName: 'üßπ Run ESLint'

        - script: |
            cd src
            npm test
          displayName: 'üß™ Run Unit Tests'

        - task: ArchiveFiles@2
          displayName: 'üì¶ Zip Code for Deployment'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
            replaceExistingArchive: true

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/app.zip'
            artifact: 'drop'
            publishLocation: 'pipeline'

- stage: DeployDev
  displayName: 'üöÄ Deploy to Dev Environment'
  dependsOn: BuildAndTest
  jobs:
    - job: DeployDevJob
      displayName: 'Create Web App and Deploy to Dev'
      steps:
        - task: AzureCLI@2
          displayName: 'üîß Ensure Resource Group and Create Web App'
          inputs:
            azureSubscription: 'Con1'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "üîç Checking if resource group '${{ variables.resourceGroup }}' exists..."
              if ! az group show --name "${{ variables.resourceGroup }}" &> /dev/null; then
                echo "‚öôÔ∏è Creating resource group..."
                az group create --name "${{ variables.resourceGroup }}" --location "${{ variables.location }}"
              else
                echo "‚úÖ Resource group exists."
              fi

              echo "üîç Validating runtime '${{ variables.runtime }}'..."
              supported_runtimes=$(az webapp list-runtimes --linux | grep "${{ variables.runtime }}")
              if [ -z "$supported_runtimes" ]; then
                echo "‚ùå Runtime '${{ variables.runtime }}' is not supported. Exiting."
                exit 1
              fi
              echo "‚úÖ Runtime is valid."

              echo "üöÄ Creating Web App: ${{ variables.webAppName }}"
              az webapp create \
                --resource-group "${{ variables.resourceGroup }}" \
                --plan "${{ variables.appServicePlan }}" \
                --name "${{ variables.webAppName }}" \
                --runtime "${{ variables.runtime }}"

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'drop'
            path: '$(Pipeline.Workspace)/drop'

        - task: AzureWebApp@1
          displayName: 'üöÄ Deploy to Azure Web App (Dev)'
          inputs:
            azureSubscription: 'Con1'
            appType: 'webAppLinux'
            appName: '$(webAppName)'
            package: '$(Pipeline.Workspace)/drop/app.zip'

- stage: DeployStaging
  displayName: 'üöÄ Deploy to Staging'
  dependsOn: DeployDev
  jobs:
    - job: SmokeTestStaging
      displayName: '‚úÖ Post-Deploy Smoke Tests'
      steps:
        - script: |
            echo "üîç Checking if Web App is live..."
            appUrl="https://$(webAppName).azurewebsites.net"

            echo "Test 1: Checking HTTP 200..."
            status_code=$(curl -s -o /dev/null -w "%{http_code}" $appUrl)
            if [ "$status_code" -ne 200 ]; then
              echo "‚ùå Test 1 Failed: Web App is not reachable (Status Code: $status_code)"
              exit 1
            else
              echo "‚úÖ Test 1 Passed"
            fi

            echo "Test 2: Checking response time..."
            response_time=$(curl -o /dev/null -s -w "%{time_total}\n" $appUrl)
            if (( $(echo "$response_time > 5.0" | bc -l) )); then
              echo "‚ùå Test 2 Failed: Response took too long ($response_time seconds)"
              exit 1
            else
              echo "‚úÖ Test 2 Passed"
            fi

            echo "Test 3: Checking if content is correct..."
            content=$(curl -s $appUrl)
            if [[ "$content" == *"Hello from Azure DevOps"* ]]; then
              echo "‚úÖ Test 3 Passed: Content verified"
            else
              echo "‚ùå Test 3 Failed: Unexpected content"
              exit 1
            fi

- stage: DeployProduction
  displayName: 'üöÄ Deploy to Production'
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
    - deployment: DeployToProd
      displayName: 'üöÄ Deploy to Production Slot'
      environment:
        name: 'production'
        resourceType: 'VirtualMachine'  # or remove if not using a specific resource
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: 'drop'
                  path: '$(Pipeline.Workspace)/drop'

              - task: AzureWebApp@1
                displayName: 'üöÄ Deploy to Azure Web App (Production)'
                inputs:
                  azureSubscription: 'Con1'
                  appType: 'webAppLinux'
                  appName: '$(webAppName)'
                  package: '$(Pipeline.Workspace)/drop/app.zip'
